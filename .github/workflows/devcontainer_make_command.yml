#  Copyright (c) University College London Hospitals NHS Foundation Trust
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
---
name: Make command

on:
  workflow_call:
    inputs:
      command:
        type: string
        required: true
        description: Make command to run e.g bootstrap
      environment:
        type: string
        required: true
        description: The environment to deploy e.g. staging (selects the env config file and GitHub environment to use)
      suffix_override:
        type: string
        required: false
        description: An override for the naming suffix. If defined the core address space is random
      sha:
        type: string
        required: false
        description: Commit SHA to override the default GitHub checkout
    secrets:
      ARM_CLIENT_SECRET:
        required: true
      ORG_GITHUB_TOKEN:
        required: true

jobs:
  make_core:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      DEVCONTAINER_NAME: flowehr/devcontainer
    outputs:
      dc_tag: ${{ steps.dc.outputs.tag }}
      dc_runner_name: ${{ steps.dc.outputs.runner_name }}
      build_agent_command: ${{ steps.post_core.outputs.build_agent_command }}
      post_build_agent_command: ${{ steps.post_core.outputs.post_build_agent_command }}

    steps:
      - name: Set devcontainer attributes
        id: dc
        run: |
          echo "tag=${{ (inputs.suffix_override != '' && inputs.suffix_override) || inputs.environment }}" >> $GITHUB_OUTPUT
          echo "image_path=${{ vars.CI_CONTAINER_REGISTRY }}.azurecr.io/${{ env.DEVCONTAINER_NAME }}" >> $GITHUB_OUTPUT
          echo "runner_name=dc-${{ (inputs.suffix_override != '' && inputs.suffix_override) || inputs.environment }}" >> $GITHUB_OUTPUT

      - name: Set make commands to execute after the core deployment
        id: post_core
        run: |
          build_agent_command="none"
          post_build_agent_command="none"

          if echo ${{ inputs.command }} | grep -q "test" ; then
              build_agent_command="${{ inputs.command }}-without-core-destroy"
              post_build_agent_command="destroy"
          elif echo ${{ inputs.command }} | grep -q "destroy" ; then
              build_agent_command="destroy-non-core"
              post_build_agent_command="${{ inputs.command }}"
          elif echo ${{ inputs.command }} | grep -q "infrastructure"; then
              build_agent_command="${{ inputs.command }}"
          fi

          echo "Running [${build_agent_command}] on the build agent"
          echo "Running [${post_build_agent_command}] teardown"

          echo "build_agent_command=${build_agent_command}" >> $GITHUB_OUTPUT
          echo "post_build_agent_command=${post_build_agent_command}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.sha }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ vars.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ vars.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ vars.ARM_TENANT_ID }}"}'

      - name: ACR Login
        id: acr_login
        run: az acr login --name "${{ vars.CI_CONTAINER_REGISTRY }}"

      - name: Pre-build devcontainer
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ steps.dc.outputs.image_path }}
          cacheFrom: ${{ steps.dc.outputs.image_path }}
          imageTag: ${{ steps.dc.outputs.tag }}
          push: never  # Happens as a post-step after the job so we need to do this manually

      - name: Push devcontainer
        id: devcontainer_push
        run: docker push ${{ steps.dc.outputs.image_path }}:${{ steps.dc.outputs.tag }}

      - name: Deploy core and build agent
        uses: devcontainers/ci@v0.3
        env:
          GITHUB_TOKEN: "${{ secrets.ORG_GITHUB_TOKEN }}"
        with:
          imageFrom: ${{ steps.dc.outputs.image_path }}:${{ steps.dc.outputs.tag }}
          cacheFrom: ${{ steps.dc.outputs.image_path }}:${{ steps.dc.outputs.tag }}
          runCmd: make infrastructure-core
          push: never
          env: |
            DOCKER_BUILDKIT=1
            TF_INPUT=0
            TF_IN_AUTOMATION=1
            ARM_CLIENT_ID=${{ vars.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID=${{ vars.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID=${{ vars.ARM_SUBSCRIPTION_ID }}
            ENVIRONMENT=${{ inputs.environment }}
            CI_CONTAINER_REGISTRY=${{ vars.CI_CONTAINER_REGISTRY }}
            CI_RESOURCE_GROUP=${{ vars.CI_RESOURCE_GROUP }}
            CI_STORAGE_ACCOUNT=${{ vars.CI_STORAGE_ACCOUNT }}
            GITHUB_TOKEN=${{ secrets.ORG_GITHUB_TOKEN }}
            SUFFIX=${{ inputs.suffix_override }}
            TF_VAR_devcontainer_image=${{ env.DEVCONTAINER_NAME }}
            TF_VAR_devcontainer_tag=${{ steps.dc.outputs.tag }}
            TF_VAR_use_random_address_space=${{ (inputs.suffix_override != '' && '1') || '0' }}
            TF_VAR_github_runner_name=${{ steps.dc.outputs.runner_name }}
            TF_VAR_github_repository=${{ github.repository }}

  build_agent_make:
    needs: [make_core]
    if: needs.make_core.outputs.build_agent_command != 'none'
    runs-on: ${{ needs.make_core.outputs.dc_runner_name }}
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # if the following values are missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.sha }}

      - name: Deploy
        env:
          DOCKER_BUILDKIT: 1
          TF_INPUT: 0
          TF_IN_AUTOMATION: 1
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
          ENVIRONMENT: ${{ inputs.environment }}
          CI_CONTAINER_REGISTRY: ${{ vars.CI_CONTAINER_REGISTRY }}
          CI_RESOURCE_GROUP: ${{ vars.CI_RESOURCE_GROUP }}
          CI_STORAGE_ACCOUNT: ${{ vars.CI_STORAGE_ACCOUNT }}
          GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN }}
          SUFFIX: ${{ inputs.suffix_override }}
          TF_VAR_use_random_address_space: ${{ (inputs.suffix_override != '' && '1') || '0' }}
          TF_VAR_devcontainer_image: ${{ env.DEVCONTAINER_NAME }}
          TF_VAR_devcontainer_tag: ${{ needs.make_core.outputs.dc_tag }}
        run: |
          make ${{ needs.make_core.outputs.build_agent_command }}

  post_build_agent_make:
    needs: [make_core, build_agent_make]
    if: needs.make_core.outputs.post_build_agent_command != 'none'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ inputs.sha }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ vars.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ vars.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ vars.ARM_TENANT_ID }}"}'

      - name: ACR Login
        run: az acr login --name "${{ vars.CI_CONTAINER_REGISTRY }}"

      - name: Post build agent command
        uses: devcontainers/ci@v0.3
        env:
          GITHUB_TOKEN: "${{ secrets.ORG_GITHUB_TOKEN }}"
        with:
          # The image name cannot be set from the make_core output because it contains a secret
          imageFrom: ${{ vars.CI_CONTAINER_REGISTRY }}.azurecr.io/${{ env.DEVCONTAINER_NAME }}:${{ needs.make_core.outputs.dc_tag }}
          cacheFrom: ${{ vars.CI_CONTAINER_REGISTRY }}.azurecr.io/${{ env.DEVCONTAINER_NAME }}:${{ needs.make_core.outputs.dc_tag }}
          runCmd: make ${{ needs.make_core.outputs.post_build_agent_command }}
          push: never
          env: |
            DOCKER_BUILDKIT=1
            TF_IN_AUTOMATION=1
            ARM_CLIENT_ID=${{ vars.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID=${{ vars.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID=${{ vars.ARM_SUBSCRIPTION_ID }}
            ENVIRONMENT=${{ inputs.environment }}
            CI_CONTAINER_REGISTRY=${{ vars.CI_CONTAINER_REGISTRY }}
            CI_RESOURCE_GROUP=${{ vars.CI_RESOURCE_GROUP }}
            CI_STORAGE_ACCOUNT=${{ vars.CI_STORAGE_ACCOUNT }}
            GITHUB_TOKEN=${{ secrets.ORG_GITHUB_TOKEN }}
            SUFFIX=${{ inputs.suffix_override }}
            TF_VAR_use_random_address_space=${{ (inputs.suffix_override != '' && '1') || '0' }}

      - name: Clean up
        if: needs.make_core.outputs.post_build_agent_command == 'destroy'
        run: |
          az acr repository delete \
            --name ${{ vars.CI_CONTAINER_REGISTRY }} \
            --image ${{ env.DEVCONTAINER_NAME }}:${{ needs.make_core.outputs.dc_tag }}
          az storage blob directory delete \
            -c tfstate \
            -d ${{ (inputs.suffix_override != '' && inputs.suffix_override) || inputs.environment }} \
            --account-name ${{ vars.CI_STORAGE_ACCOUNT }}
